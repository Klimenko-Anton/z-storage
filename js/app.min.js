/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./dist/js/app.js":
/*!************************!*\
  !*** ./dist/js/app.js ***!
  \************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/******/ (() => { // webpackBootstrap\n/******/ \t\"use strict\";\n\n;// CONCATENATED MODULE: ./src/js/files/functions.js\nlet isMobile = { Android: function () { return navigator.userAgent.match(/Android/i); }, BlackBerry: function () { return navigator.userAgent.match(/BlackBerry/i); }, iOS: function () { return navigator.userAgent.match(/iPhone|iPad|iPod/i); }, Opera: function () { return navigator.userAgent.match(/Opera Mini/i); }, Windows: function () { return navigator.userAgent.match(/IEMobile/i); }, any: function () { return (isMobile.Android() || isMobile.BlackBerry() || isMobile.iOS() || isMobile.Opera() || isMobile.Windows()); } };\r\n\r\n// Уникализация массива\r\nfunction uniqArray(array) {\r\n  return array.filter(function (item, index, self) {\r\n    return self.indexOf(item) === index;\r\n  });\r\n}\r\n\r\nfunction addTouchClass() {\r\n  // Добавление класса _touch для HTML, если мобильный браузер\r\n  if (isMobile.any()) document.documentElement.classList.add('touch');\r\n}\r\n\r\nfunction getHash() {\r\n  if (location.hash) { return location.hash.replace('#', ''); }\r\n}\r\n\r\nfunction menuOpen() {\r\n  window.addEventListener(\"load\", function () {\r\n    document.addEventListener(\"click\", function (e) {\r\n      const targetElement = e.target;\r\n      if (!targetElement.closest(\".icon-menu\")) return;\r\n      if (targetElement.closest(\".icon-menu\")) {\r\n        document.documentElement.classList.toggle(\"menu-open\");\r\n        document.documentElement.classList.toggle(\"lock\");\r\n      }\r\n    });\r\n  });\r\n}\r\n// Показ шапки при скролле\r\nfunction headerScroll() {\r\n  const headerElement = document.querySelector(\".header\");\r\n\r\n  const callback = function (entries, callback) {\r\n    if (entries[0].isIntersecting) {\r\n      headerElement.classList.remove(\"_header-scroll\");\r\n    } else {\r\n      headerElement.classList.add(\"_header-scroll\");\r\n    }\r\n  }\r\n  const observerHeader = new IntersectionObserver(callback);\r\n  observerHeader.observe(headerElement);\r\n};\r\n\r\n// Watcher \r\nfunction elementWatches() {\r\n  const watchElements = document.querySelectorAll(\"[data-watch]\");\r\n  const observerSections = function (entries, observer) {\r\n    entries.forEach(entry => {\r\n      if (entry.isIntersecting) {\r\n        entry.target.classList.add(\"_watching\");\r\n        observer.unobserve(entry.target);\r\n      }\r\n    });\r\n  };\r\n  watchElements.forEach(section => {\r\n    let thresholdValue;\r\n    if (section.dataset.watchThreshold) {\r\n      thresholdValue = section.dataset.watchThreshold ? section.dataset.watchThreshold : 0;\r\n    }\r\n    if (section.dataset.watchParallax) {\r\n      let parallaxValue = section.dataset.watchParallax ? section.dataset.watchParallax : 500;\r\n      console.log(parallaxValue);\r\n    }\r\n    const observer = new IntersectionObserver(observerSections, {\r\n      threshold: thresholdValue,\r\n    });\r\n    observer.observe(section);\r\n  });\r\n}\r\n// Скролл к нужному блоку\r\nfunction gotoScroll() {\r\n  const gotoLinks = document.querySelectorAll(\"[data-goto]\");\r\n  if (gotoLinks.length) {\r\n    gotoLinks.forEach(gotoLink => {\r\n      gotoLink.addEventListener(\"click\", onMenuLinkClick);\r\n    });\r\n\r\n    function onMenuLinkClick(e) {\r\n      e.preventDefault();\r\n      const gotoTargetLink = e.target;\r\n      const gotoCurrentLink = gotoTargetLink.closest(\"[data-goto]\").dataset.goto;\r\n      if (gotoTargetLink.dataset.goto && document.querySelector(gotoTargetLink.dataset.goto)) {\r\n        const gotoBlock = document.querySelector(gotoCurrentLink);\r\n        const gotoLinkHeader = gotoTargetLink.hasAttribute(\"data-goto-header\");\r\n        const gotoLinkHeaderHeight = document.querySelector(\"header\").offsetHeight;\r\n        const gotoLinkOffsetTop = gotoTargetLink.hasAttribute(\"data-goto-top\");\r\n        const gotoLinkOffsetTopValue = gotoTargetLink.dataset.gotoTop ? gotoTargetLink.dataset.gotoTop : 0;\r\n        let gotoTargetBlockPosition = gotoBlock.offsetTop;\r\n        gotoTargetBlockPosition = gotoLinkHeader ? gotoTargetBlockPosition - gotoLinkHeaderHeight : gotoTargetBlockPosition;\r\n        gotoTargetBlockPosition = gotoLinkOffsetTop ? gotoTargetBlockPosition - gotoLinkOffsetTopValue : gotoTargetBlockPosition;\r\n        window.scrollTo({\r\n          top: gotoTargetBlockPosition,\r\n          behavior: \"smooth\",\r\n        });\r\n      }\r\n\r\n      if (document.documentElement.classList.contains(\"menu-open\")) {\r\n        document.documentElement.classList.remove(\"menu-open\", \"lock\")\r\n      }\r\n\r\n    };\r\n  }\r\n}\r\n\r\n// Переключение темы сайта\r\n//========================================================================================================================================================\r\nfunction themeToggle() {\r\n  const html = document.documentElement, mode = localStorage.getItem('mode') || 'auto';\r\n  const getPreferredMode = () => matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'\r\n  const switchMode = mode => {\r\n    const newMode = mode === 'auto' ? getPreferredMode() : mode\r\n    html.classList.remove('light', 'dark')\r\n    html.classList.add(`${newMode}`)\r\n    localStorage.setItem('mode', mode)\r\n    document.querySelectorAll('[data-mode]').forEach(el => el.classList.toggle('_active-theme-btn', el.dataset.mode === mode))\r\n  }\r\n\r\n  matchMedia('(prefers-color-scheme: dark)').addEventListener('change', () => {\r\n    if (localStorage.getItem('mode') === 'auto') switchMode('auto')\r\n  })\r\n\r\n  document.addEventListener('click', e => e.target.dataset.mode && switchMode(e.target.dataset.mode))\r\n  switchMode(mode)\r\n}\r\n//========================================================================================================================================================\r\n\r\n/*Модуль звездного рейтинга */\r\nfunction formRating() {\r\n  const ratings = document.querySelectorAll('.rating');\r\n  if (ratings.length > 0) {\r\n    initRatings();\r\n  }\r\n  // Основная функция\r\n  function initRatings() {\r\n    let ratingActive, ratingValue;\r\n    // \"Бегаем\" по всем рейтингам на странице\r\n    for (let index = 0; index < ratings.length; index++) {\r\n      const rating = ratings[index];\r\n      initRating(rating);\r\n    }\r\n    // Инициализируем конкретный рейтинг\r\n    function initRating(rating) {\r\n      initRatingVars(rating);\r\n\r\n      setRatingActiveWidth();\r\n\r\n      if (rating.classList.contains('rating_set')) {\r\n        setRating(rating);\r\n      }\r\n    }\r\n    // Инициализация переменных\r\n    function initRatingVars(rating) {\r\n      ratingActive = rating.querySelector('.rating__active');\r\n      ratingValue = rating.querySelector('.rating__value');\r\n    }\r\n    // Изменяем ширину активных звезд\r\n    function setRatingActiveWidth(index = ratingValue.innerHTML) {\r\n      const ratingActiveWidth = index / 0.05;\r\n      ratingActive.style.width = `${ratingActiveWidth}%`;\r\n    }\r\n    // Возможность указать оценку\r\n    function setRating(rating) {\r\n      const ratingItems = rating.querySelectorAll('.rating__item');\r\n      for (let index = 0; index < ratingItems.length; index++) {\r\n        const ratingItem = ratingItems[index];\r\n        ratingItem.addEventListener(\"mouseenter\", function (e) {\r\n          // Обновление переменных\r\n          initRatingVars(rating);\r\n          // Обновление активных звезд\r\n          setRatingActiveWidth(ratingItem.value);\r\n        });\r\n        ratingItem.addEventListener(\"mouseleave\", function (e) {\r\n          // Обновление активных звезд\r\n          setRatingActiveWidth();\r\n        });\r\n        ratingItem.addEventListener(\"click\", function (e) {\r\n          // Обновление переменных\r\n          initRatingVars(rating);\r\n\r\n          if (rating.dataset.ajax) {\r\n            // \"Отправить\" на сервер\r\n            setRatingValue(ratingItem.value, rating);\r\n          } else {\r\n            // Отобразить указанную оценку\r\n            ratingValue.innerHTML = index + 1;\r\n            setRatingActiveWidth();\r\n          }\r\n        });\r\n      }\r\n    }\r\n    async function setRatingValue(value, rating) {\r\n      if (!rating.classList.contains('rating_sending')) {\r\n        rating.classList.add('rating_sending');\r\n\r\n        // // Отправка данных (value) на сервер\r\n        // let response = await fetch('/files/product.json', {\r\n        //   method: 'GET',\r\n\r\n        //   body: JSON.stringify({\r\n        //     userRating: value\r\n        //   }),\r\n        //   headers: {\r\n        //     'content-type': 'application/json'\r\n        //   }\r\n\r\n        // });\r\n        if (response.ok) {\r\n          const result = await response.json();\r\n\r\n          // Получаем новый рейтинг\r\n          const newRating = result.newRating;\r\n\r\n          // Вывод нового среднего результата\r\n          ratingValue.innerHTML = newRating;\r\n\r\n          // Обновление активных звезд\r\n          setRatingActiveWidth();\r\n\r\n          rating.classList.remove('rating_sending');\r\n        } else {\r\n          alert(\"Ошибка\");\r\n\r\n          rating.classList.remove('rating_sending');\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n//========================================================================================================================================================\r\nfunction loopScroller() {\r\n  const scroller = document.querySelectorAll(\".scroller\");\r\n  if (scroller) {\r\n    scroller.forEach(scrollerBlock => {\r\n      scrollerBlock.setAttribute(\"data-scroll-animation\", \"true\");\r\n      const count = 4;  // Количество копий всех элементов\r\n      const scrollerInner = scrollerBlock.querySelector(\".scroller__inner\");\r\n      const scrollerContent = Array.from(scrollerInner.children);\r\n\r\n      // Сначала добавляем оригинальные элементы (если они не добавлены)\r\n      scrollerContent.forEach(contentScroller => {\r\n        scrollerInner.append(contentScroller);\r\n      });\r\n\r\n      // Клонируем все элементы count раз\r\n      for (let i = 0; i < count; i++) {\r\n        scrollerContent.forEach(contentScroller => {\r\n          const scrollerInnerClone = contentScroller.cloneNode(true);\r\n          scrollerInnerClone.setAttribute(\"aria-hidden\", \"true\");\r\n          scrollerInner.append(scrollerInnerClone);\r\n        });\r\n      }\r\n    });\r\n  }\r\n}\r\n//========================================================================================================================================================\r\nlet _slideUp = (target, duration = 500, showmore = 0) => {\r\n  if (!target.classList.contains('_slide')) {\r\n    target.classList.add('_slide');\r\n    target.style.transitionProperty = 'height, margin, padding';\r\n    target.style.transitionDuration = duration + 'ms';\r\n    target.style.height = `${target.offsetHeight}px`;\r\n    target.offsetHeight;\r\n    target.style.overflow = 'hidden';\r\n    target.style.height = showmore ? `${showmore}px` : `0px`;\r\n    target.style.paddingTop = 0;\r\n    target.style.paddingBottom = 0;\r\n    target.style.marginTop = 0;\r\n    target.style.marginBottom = 0;\r\n    window.setTimeout(() => {\r\n      target.hidden = !showmore ? true : false;\r\n      !showmore ? target.style.removeProperty('height') : null;\r\n      target.style.removeProperty('padding-top');\r\n      target.style.removeProperty('padding-bottom');\r\n      target.style.removeProperty('margin-top');\r\n      target.style.removeProperty('margin-bottom');\r\n      !showmore ? target.style.removeProperty('overflow') : null;\r\n      target.style.removeProperty('transition-duration');\r\n      target.style.removeProperty('transition-property');\r\n      target.classList.remove('_slide');\r\n      // Создаем событие\r\n      document.dispatchEvent(new CustomEvent(\"slideUpDone\", {\r\n        detail: {\r\n          target: target\r\n        }\r\n      }));\r\n    }, duration);\r\n  }\r\n}\r\nlet _slideDown = (target, duration = 500, showmore = 0) => {\r\n  if (!target.classList.contains('_slide')) {\r\n    target.classList.add('_slide');\r\n    target.hidden = target.hidden ? false : null;\r\n    showmore ? target.style.removeProperty('height') : null;\r\n    let height = target.offsetHeight;\r\n    target.style.overflow = 'hidden';\r\n    target.style.height = showmore ? `${showmore}px` : `0px`;\r\n    target.style.paddingTop = 0;\r\n    target.style.paddingBottom = 0;\r\n    target.style.marginTop = 0;\r\n    target.style.marginBottom = 0;\r\n    target.offsetHeight;\r\n    target.style.transitionProperty = \"height, margin, padding\";\r\n    target.style.transitionDuration = duration + 'ms';\r\n    target.style.height = height + 'px';\r\n    target.style.removeProperty('padding-top');\r\n    target.style.removeProperty('padding-bottom');\r\n    target.style.removeProperty('margin-top');\r\n    target.style.removeProperty('margin-bottom');\r\n    window.setTimeout(() => {\r\n      target.style.removeProperty('height');\r\n      target.style.removeProperty('overflow');\r\n      target.style.removeProperty('transition-duration');\r\n      target.style.removeProperty('transition-property');\r\n      target.classList.remove('_slide');\r\n      // Создаем событие\r\n      document.dispatchEvent(new CustomEvent(\"slideDownDone\", {\r\n        detail: {\r\n          target: target\r\n        }\r\n      }));\r\n    }, duration);\r\n  }\r\n}\r\nlet _slideToggle = (target, duration = 500) => {\r\n  if (target.hidden) {\r\n    return _slideDown(target, duration);\r\n  } else {\r\n    return _slideUp(target, duration);\r\n  }\r\n}\r\n//========================================================================================================================================================\r\nlet bodyLockStatus = true;\r\nlet bodyLockToggle = (delay = 500) => {\r\n  if (document.documentElement.classList.contains('lock')) {\r\n    bodyUnlock(delay);\r\n  } else {\r\n    bodyLock(delay);\r\n  }\r\n}\r\nlet bodyUnlock = (delay = 500) => {\r\n  let body = document.querySelector(\"body\");\r\n  if (bodyLockStatus) {\r\n    let lock_padding = document.querySelectorAll(\"[data-lp]\");\r\n    setTimeout(() => {\r\n      for (let index = 0; index < lock_padding.length; index++) {\r\n        const el = lock_padding[index];\r\n        el.style.paddingRight = '0px';\r\n      }\r\n      body.style.paddingRight = '0px';\r\n      document.documentElement.classList.remove(\"lock\");\r\n    }, delay);\r\n    bodyLockStatus = false;\r\n    setTimeout(function () {\r\n      bodyLockStatus = true;\r\n    }, delay);\r\n  }\r\n}\r\nlet bodyLock = (delay = 500) => {\r\n  let body = document.querySelector(\"body\");\r\n  if (bodyLockStatus) {\r\n    let lock_padding = document.querySelectorAll(\"[data-lp]\");\r\n    for (let index = 0; index < lock_padding.length; index++) {\r\n      const el = lock_padding[index];\r\n      el.style.paddingRight = window.innerWidth - document.querySelector('.wrapper').offsetWidth + 'px';\r\n    }\r\n    body.style.paddingRight = window.innerWidth - document.querySelector('.wrapper').offsetWidth + 'px';\r\n    document.documentElement.classList.add(\"lock\");\r\n\r\n    bodyLockStatus = false;\r\n    setTimeout(function () {\r\n      bodyLockStatus = true;\r\n    }, delay);\r\n  }\r\n}\r\n//========================================================================================================================================================\r\n\r\n// Спойлеры\r\nfunction spollers() {\r\n  const spollersArray = document.querySelectorAll('[data-spollers]');\r\n  if (spollersArray.length > 0) {\r\n    // Событие клика\r\n    document.addEventListener(\"click\", setSpollerAction);\r\n    // Получение обычных слойлеров\r\n    const spollersRegular = Array.from(spollersArray).filter(function (item, index, self) {\r\n      return !item.dataset.spollers.split(\",\")[0];\r\n    });\r\n    // Инициализация обычных слойлеров\r\n    if (spollersRegular.length) {\r\n      initSpollers(spollersRegular);\r\n    }\r\n    // Получение слойлеров с медиа-запросами\r\n    let mdQueriesArray = dataMediaQueries(spollersArray, \"spollers\");\r\n    if (mdQueriesArray && mdQueriesArray.length) {\r\n      mdQueriesArray.forEach(mdQueriesItem => {\r\n        // Событие\r\n        mdQueriesItem.matchMedia.addEventListener(\"change\", function () {\r\n          initSpollers(mdQueriesItem.itemsArray, mdQueriesItem.matchMedia);\r\n        });\r\n        initSpollers(mdQueriesItem.itemsArray, mdQueriesItem.matchMedia);\r\n      });\r\n    }\r\n    // Инициализация\r\n    function initSpollers(spollersArray, matchMedia = false) {\r\n      spollersArray.forEach(spollersBlock => {\r\n        spollersBlock = matchMedia ? spollersBlock.item : spollersBlock;\r\n        if (matchMedia.matches || !matchMedia) {\r\n          spollersBlock.classList.add('_spoller-init');\r\n          initSpollerBody(spollersBlock);\r\n        } else {\r\n          spollersBlock.classList.remove('_spoller-init');\r\n          initSpollerBody(spollersBlock, false);\r\n        }\r\n      });\r\n    }\r\n    // Работа с контентом\r\n    function initSpollerBody(spollersBlock, hideSpollerBody = true) {\r\n      let spollerItems = spollersBlock.querySelectorAll('details');\r\n      if (spollerItems.length) {\r\n        //spollerItems = Array.from(spollerItems).filter(item => item.closest('[data-spollers]') === spollersBlock);\r\n        spollerItems.forEach(spollerItem => {\r\n          let spollerTitle = spollerItem.querySelector('summary');\r\n          if (hideSpollerBody) {\r\n            spollerTitle.removeAttribute('tabindex');\r\n            if (!spollerItem.hasAttribute('data-open')) {\r\n              spollerItem.open = false;\r\n              spollerTitle.nextElementSibling.hidden = true;\r\n            } else {\r\n              spollerTitle.classList.add('_spoller-active');\r\n              spollerItem.open = true;\r\n            }\r\n          } else {\r\n            spollerTitle.setAttribute('tabindex', '-1');\r\n            spollerTitle.classList.remove('_spoller-active');\r\n            spollerItem.open = true;\r\n            spollerTitle.nextElementSibling.hidden = false;\r\n          }\r\n        });\r\n      }\r\n    }\r\n    function setSpollerAction(e) {\r\n      const el = e.target;\r\n      if (el.closest('summary') && el.closest('[data-spollers]')) {\r\n        e.preventDefault();\r\n        if (el.closest('[data-spollers]').classList.contains('_spoller-init')) {\r\n          const spollerTitle = el.closest('summary');\r\n          const spollerBlock = spollerTitle.closest('details');\r\n          const spollersBlock = spollerTitle.closest('[data-spollers]');\r\n          const oneSpoller = spollersBlock.hasAttribute('data-one-spoller');\r\n          const scrollSpoller = spollerBlock.hasAttribute('data-spoller-scroll');\r\n          const spollerSpeed = spollersBlock.dataset.spollersSpeed ? parseInt(spollersBlock.dataset.spollersSpeed) : 500;\r\n          if (!spollersBlock.querySelectorAll('._slide').length) {\r\n            if (oneSpoller && !spollerBlock.open) {\r\n              hideSpollersBody(spollersBlock);\r\n            }\r\n\r\n            !spollerBlock.open ? spollerBlock.open = true : setTimeout(() => { spollerBlock.open = false }, spollerSpeed);\r\n\r\n            spollerTitle.classList.toggle('_spoller-active');\r\n            _slideToggle(spollerTitle.nextElementSibling, spollerSpeed);\r\n\r\n            if (scrollSpoller && spollerTitle.classList.contains('_spoller-active')) {\r\n              const scrollSpollerValue = spollerBlock.dataset.spollerScroll;\r\n              const scrollSpollerOffset = +scrollSpollerValue ? +scrollSpollerValue : 0;\r\n              const scrollSpollerNoHeader = spollerBlock.hasAttribute('data-spoller-scroll-noheader') ? document.querySelector('.header').offsetHeight : 0;\r\n\r\n              //setTimeout(() => {\r\n              window.scrollTo(\r\n                {\r\n                  top: spollerBlock.offsetTop - (scrollSpollerOffset + scrollSpollerNoHeader),\r\n                  behavior: \"smooth\",\r\n                }\r\n              );\r\n              //}, spollerSpeed);\r\n            }\r\n          }\r\n        }\r\n      }\r\n      // Закрытие при клике вне спойлера\r\n      if (!el.closest('[data-spollers]')) {\r\n        const spollersClose = document.querySelectorAll('[data-spoller-close]');\r\n        if (spollersClose.length) {\r\n          spollersClose.forEach(spollerClose => {\r\n            const spollersBlock = spollerClose.closest('[data-spollers]');\r\n            const spollerCloseBlock = spollerClose.parentNode;\r\n            if (spollersBlock.classList.contains('_spoller-init')) {\r\n              const spollerSpeed = spollersBlock.dataset.spollersSpeed ? parseInt(spollersBlock.dataset.spollersSpeed) : 500;\r\n              spollerClose.classList.remove('_spoller-active');\r\n              _slideUp(spollerClose.nextElementSibling, spollerSpeed);\r\n              setTimeout(() => { spollerCloseBlock.open = false }, spollerSpeed);\r\n            }\r\n          });\r\n        }\r\n      }\r\n    }\r\n    function hideSpollersBody(spollersBlock) {\r\n      const spollerActiveBlock = spollersBlock.querySelector('details[open]');\r\n      if (spollerActiveBlock && !spollersBlock.querySelectorAll('._slide').length) {\r\n        const spollerActiveTitle = spollerActiveBlock.querySelector('summary');\r\n        const spollerSpeed = spollersBlock.dataset.spollersSpeed ? parseInt(spollersBlock.dataset.spollersSpeed) : 500;\r\n        spollerActiveTitle.classList.remove('_spoller-active');\r\n        _slideUp(spollerActiveTitle.nextElementSibling, spollerSpeed);\r\n        setTimeout(() => { spollerActiveBlock.open = false }, spollerSpeed);\r\n      }\r\n    }\r\n  }\r\n}\r\n//========================================================================================================================================================\r\n\r\n// ТАБЫ\r\nfunction tabs() {\r\n  const tabs = document.querySelectorAll('[data-tabs]');\r\n  let tabsActiveHash = [];\r\n\r\n  if (tabs.length > 0) {\r\n    const hash = getHash();\r\n    if (hash && hash.startsWith('tab-')) {\r\n      tabsActiveHash = hash.replace('tab-', '').split('-');\r\n    }\r\n    tabs.forEach((tabsBlock, index) => {\r\n      tabsBlock.classList.add('_tab-init');\r\n      tabsBlock.setAttribute('data-tabs-index', index);\r\n      tabsBlock.addEventListener(\"click\", setTabsAction);\r\n      initTabs(tabsBlock);\r\n    });\r\n\r\n    // Получение слойлеров с медиа-запросами\r\n    let mdQueriesArray = dataMediaQueries(tabs, \"tabs\");\r\n    if (mdQueriesArray && mdQueriesArray.length) {\r\n      mdQueriesArray.forEach(mdQueriesItem => {\r\n        // Подія\r\n        mdQueriesItem.matchMedia.addEventListener(\"change\", function () {\r\n          setTitlePosition(mdQueriesItem.itemsArray, mdQueriesItem.matchMedia);\r\n        });\r\n        setTitlePosition(mdQueriesItem.itemsArray, mdQueriesItem.matchMedia);\r\n      });\r\n    }\r\n  }\r\n  // Установка позиций заголовков\r\n  function setTitlePosition(tabsMediaArray, matchMedia) {\r\n    tabsMediaArray.forEach(tabsMediaItem => {\r\n      tabsMediaItem = tabsMediaItem.item;\r\n      let tabsTitles = tabsMediaItem.querySelector('[data-tabs-titles]');\r\n      let tabsTitleItems = tabsMediaItem.querySelectorAll('[data-tabs-title]');\r\n      let tabsContent = tabsMediaItem.querySelector('[data-tabs-body]');\r\n      let tabsContentItems = tabsMediaItem.querySelectorAll('[data-tabs-item]');\r\n      tabsTitleItems = Array.from(tabsTitleItems).filter(item => item.closest('[data-tabs]') === tabsMediaItem);\r\n      tabsContentItems = Array.from(tabsContentItems).filter(item => item.closest('[data-tabs]') === tabsMediaItem);\r\n      tabsContentItems.forEach((tabsContentItem, index) => {\r\n        if (matchMedia.matches) {\r\n          tabsContent.append(tabsTitleItems[index]);\r\n          tabsContent.append(tabsContentItem);\r\n          tabsMediaItem.classList.add('_tab-spoller');\r\n        } else {\r\n          tabsTitles.append(tabsTitleItems[index]);\r\n          tabsMediaItem.classList.remove('_tab-spoller');\r\n        }\r\n      });\r\n    });\r\n  }\r\n  // Работа с контентом\r\n  function initTabs(tabsBlock) {\r\n    let tabsTitles = tabsBlock.querySelectorAll('[data-tabs-titles]>*');\r\n    let tabsContent = tabsBlock.querySelectorAll('[data-tabs-body]>*');\r\n    const tabsBlockIndex = tabsBlock.dataset.tabsIndex;\r\n    const tabsActiveHashBlock = tabsActiveHash[0] == tabsBlockIndex;\r\n\r\n    if (tabsActiveHashBlock) {\r\n      const tabsActiveTitle = tabsBlock.querySelector('[data-tabs-titles]>._tab-active');\r\n      tabsActiveTitle ? tabsActiveTitle.classList.remove('_tab-active') : null;\r\n    }\r\n    if (tabsContent.length) {\r\n      //tabsContent = Array.from(tabsContent).filter(item => item.closest('[data-tabs]') === tabsBlock);\r\n      //tabsTitles = Array.from(tabsTitles).filter(item => item.closest('[data-tabs]') === tabsBlock);\r\n      tabsContent.forEach((tabsContentItem, index) => {\r\n        tabsTitles[index].setAttribute('data-tabs-title', '');\r\n        tabsContentItem.setAttribute('data-tabs-item', '');\r\n\r\n        if (tabsActiveHashBlock && index == tabsActiveHash[1]) {\r\n          tabsTitles[index].classList.add('_tab-active');\r\n        }\r\n        tabsContentItem.hidden = !tabsTitles[index].classList.contains('_tab-active');\r\n      });\r\n    }\r\n  }\r\n  function setTabsStatus(tabsBlock) {\r\n    let tabsTitles = tabsBlock.querySelectorAll('[data-tabs-title]');\r\n    let tabsContent = tabsBlock.querySelectorAll('[data-tabs-item]');\r\n    const tabsBlockIndex = tabsBlock.dataset.tabsIndex;\r\n    function isTabsAnamate(tabsBlock) {\r\n      if (tabsBlock.hasAttribute('data-tabs-animate')) {\r\n        return tabsBlock.dataset.tabsAnimate > 0 ? Number(tabsBlock.dataset.tabsAnimate) : 500;\r\n      }\r\n    }\r\n    const tabsBlockAnimate = isTabsAnamate(tabsBlock);\r\n    if (tabsContent.length > 0) {\r\n      const isHash = tabsBlock.hasAttribute('data-tabs-hash');\r\n      tabsContent = Array.from(tabsContent).filter(item => item.closest('[data-tabs]') === tabsBlock);\r\n      tabsTitles = Array.from(tabsTitles).filter(item => item.closest('[data-tabs]') === tabsBlock);\r\n      tabsContent.forEach((tabsContentItem, index) => {\r\n        if (tabsTitles[index].classList.contains('_tab-active')) {\r\n          if (tabsBlockAnimate) {\r\n            _slideDown(tabsContentItem, tabsBlockAnimate);\r\n          } else {\r\n            tabsContentItem.hidden = false;\r\n          }\r\n          if (isHash && !tabsContentItem.closest('.popup')) {\r\n            setHash(`tab-${tabsBlockIndex}-${index}`);\r\n          }\r\n        } else {\r\n          if (tabsBlockAnimate) {\r\n            _slideUp(tabsContentItem, tabsBlockAnimate);\r\n          } else {\r\n            tabsContentItem.hidden = true;\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }\r\n  function setTabsAction(e) {\r\n    const el = e.target;\r\n    if (el.closest('[data-tabs-title]')) {\r\n      const tabTitle = el.closest('[data-tabs-title]');\r\n      const tabsBlock = tabTitle.closest('[data-tabs]');\r\n      if (!tabTitle.classList.contains('_tab-active') && !tabsBlock.querySelector('._slide')) {\r\n        let tabActiveTitle = tabsBlock.querySelectorAll('[data-tabs-title]._tab-active');\r\n        tabActiveTitle.length ? tabActiveTitle = Array.from(tabActiveTitle).filter(item => item.closest('[data-tabs]') === tabsBlock) : null;\r\n        tabActiveTitle.length ? tabActiveTitle[0].classList.remove('_tab-active') : null;\r\n        tabTitle.classList.add('_tab-active');\r\n        setTabsStatus(tabsBlock);\r\n      }\r\n      e.preventDefault();\r\n    }\r\n  }\r\n}\r\n//========================================================================================================================================================\r\n\r\n// Показать еще \r\nfunction showMore() {\r\n  window.addEventListener(\"load\", function (e) {\r\n    const showMoreBlocks = document.querySelectorAll('[data-showmore]');\r\n    let showMoreBlocksRegular;\r\n    let mdQueriesArray;\r\n    if (showMoreBlocks.length) {\r\n      // Получение обычных объектов\r\n      showMoreBlocksRegular = Array.from(showMoreBlocks).filter(function (item, index, self) {\r\n        return !item.dataset.showmoreMedia;\r\n      });\r\n      // Инициализация обычных объектов\r\n      showMoreBlocksRegular.length ? initItems(showMoreBlocksRegular) : null;\r\n\r\n      document.addEventListener(\"click\", showMoreActions);\r\n      window.addEventListener(\"resize\", showMoreActions);\r\n\r\n      // Получение объектов с медиа-запросами\r\n      mdQueriesArray = dataMediaQueries(showMoreBlocks, \"showmoreMedia\");\r\n      if (mdQueriesArray && mdQueriesArray.length) {\r\n        mdQueriesArray.forEach(mdQueriesItem => {\r\n          // Событие\r\n          mdQueriesItem.matchMedia.addEventListener(\"change\", function () {\r\n            initItems(mdQueriesItem.itemsArray, mdQueriesItem.matchMedia);\r\n          });\r\n        });\r\n        initItemsMedia(mdQueriesArray);\r\n      }\r\n    }\r\n    function initItemsMedia(mdQueriesArray) {\r\n      mdQueriesArray.forEach(mdQueriesItem => {\r\n        initItems(mdQueriesItem.itemsArray, mdQueriesItem.matchMedia);\r\n      });\r\n    }\r\n    function initItems(showMoreBlocks, matchMedia) {\r\n      showMoreBlocks.forEach(showMoreBlock => {\r\n        initItem(showMoreBlock, matchMedia);\r\n      });\r\n    }\r\n    function initItem(showMoreBlock, matchMedia = false) {\r\n      showMoreBlock = matchMedia ? showMoreBlock.item : showMoreBlock;\r\n      let showMoreContent = showMoreBlock.querySelectorAll('[data-showmore-content]');\r\n      let showMoreButton = showMoreBlock.querySelectorAll('[data-showmore-button]');\r\n      showMoreContent = Array.from(showMoreContent).filter(item => item.closest('[data-showmore]') === showMoreBlock)[0];\r\n      showMoreButton = Array.from(showMoreButton).filter(item => item.closest('[data-showmore]') === showMoreBlock)[0];\r\n      const hiddenHeight = getHeight(showMoreBlock, showMoreContent);\r\n      if (matchMedia.matches || !matchMedia) {\r\n        if (hiddenHeight < getOriginalHeight(showMoreContent)) {\r\n          _slideUp(showMoreContent, 0, showMoreBlock.classList.contains('_showmore-active') ? getOriginalHeight(showMoreContent) : hiddenHeight);\r\n          showMoreButton.hidden = false;\r\n        } else {\r\n          _slideDown(showMoreContent, 0, hiddenHeight);\r\n          showMoreButton.hidden = true;\r\n        }\r\n      } else {\r\n        _slideDown(showMoreContent, 0, hiddenHeight);\r\n        showMoreButton.hidden = true;\r\n      }\r\n    }\r\n    function getHeight(showMoreBlock, showMoreContent) {\r\n      let hiddenHeight = 0;\r\n      const showMoreType = showMoreBlock.dataset.showmore ? showMoreBlock.dataset.showmore : 'size';\r\n      const rowGap = parseFloat(getComputedStyle(showMoreContent).rowGap) ? parseFloat(getComputedStyle(showMoreContent).rowGap) : 0;\r\n      if (showMoreType === 'items') {\r\n        const showMoreTypeValue = showMoreContent.dataset.showmoreContent ? showMoreContent.dataset.showmoreContent : 3;\r\n        const showMoreItems = showMoreContent.children;\r\n        for (let index = 1; index < showMoreItems.length; index++) {\r\n          const showMoreItem = showMoreItems[index - 1];\r\n          const marginTop = parseFloat(getComputedStyle(showMoreItem).marginTop) ? parseFloat(getComputedStyle(showMoreItem).marginTop) : 0;\r\n          const marginBottom = parseFloat(getComputedStyle(showMoreItem).marginBottom) ? parseFloat(getComputedStyle(showMoreItem).marginBottom) : 0;\r\n          hiddenHeight += showMoreItem.offsetHeight + marginTop;\r\n          if (index == showMoreTypeValue) break;\r\n          hiddenHeight += marginBottom;\r\n        }\r\n        rowGap ? hiddenHeight += (showMoreTypeValue - 1) * rowGap : null;\r\n      } else {\r\n        const showMoreTypeValue = showMoreContent.dataset.showmoreContent ? showMoreContent.dataset.showmoreContent : 150;\r\n        hiddenHeight = showMoreTypeValue;\r\n      }\r\n      return hiddenHeight;\r\n    }\r\n\r\n    function getOriginalHeight(showMoreContent) {\r\n      let parentHidden;\r\n      let hiddenHeight = showMoreContent.offsetHeight;\r\n      showMoreContent.style.removeProperty('height');\r\n      if (showMoreContent.closest(`[hidden]`)) {\r\n        parentHidden = showMoreContent.closest(`[hidden]`);\r\n        parentHidden.hidden = false;\r\n      }\r\n      let originalHeight = showMoreContent.offsetHeight;\r\n      parentHidden ? parentHidden.hidden = true : null;\r\n      showMoreContent.style.height = `${hiddenHeight}px`;\r\n      return originalHeight;\r\n    }\r\n    function showMoreActions(e) {\r\n      const targetEvent = e.target;\r\n      const targetType = e.type;\r\n      if (targetType === 'click') {\r\n        if (targetEvent.closest('[data-showmore-button]')) {\r\n          const showMoreButton = targetEvent.closest('[data-showmore-button]');\r\n          const showMoreBlock = showMoreButton.closest('[data-showmore]');\r\n          const showMoreContent = showMoreBlock.querySelector('[data-showmore-content]');\r\n          const showMoreSpeed = showMoreBlock.dataset.showmoreButton ? showMoreBlock.dataset.showmoreButton : '500';\r\n          const hiddenHeight = getHeight(showMoreBlock, showMoreContent);\r\n          if (!showMoreContent.classList.contains('_slide')) {\r\n            showMoreBlock.classList.contains('_showmore-active') ? _slideUp(showMoreContent, showMoreSpeed, hiddenHeight) : _slideDown(showMoreContent, showMoreSpeed, hiddenHeight);\r\n            showMoreBlock.classList.toggle('_showmore-active');\r\n          }\r\n        }\r\n      } else if (targetType === 'resize') {\r\n        showMoreBlocksRegular && showMoreBlocksRegular.length ? initItems(showMoreBlocksRegular) : null;\r\n        mdQueriesArray && mdQueriesArray.length ? initItemsMedia(mdQueriesArray) : null;\r\n      }\r\n    }\r\n  });\r\n}\r\n//========================================================================================================================================================\r\n\r\nfunction dataMediaQueries(array, dataSetValue) {\r\n  // Получение объектов с медиа-запросами\r\n  const media = Array.from(array).filter(function (item, index, self) {\r\n    if (item.dataset[dataSetValue]) {\r\n      return item.dataset[dataSetValue].split(\",\")[0];\r\n    }\r\n  });\r\n  // Инициализация объектов с медиа-запросами\r\n  if (media.length) {\r\n    const breakpointsArray = [];\r\n    media.forEach(item => {\r\n      const params = item.dataset[dataSetValue];\r\n      const breakpoint = {};\r\n      const paramsArray = params.split(\",\");\r\n      breakpoint.value = paramsArray[0];\r\n      breakpoint.type = paramsArray[1] ? paramsArray[1].trim() : \"max\";\r\n      breakpoint.item = item;\r\n      breakpointsArray.push(breakpoint);\r\n    });\r\n    // Получаем уникальные брейкпоинты\r\n    let mdQueries = breakpointsArray.map(function (item) {\r\n      return '(' + item.type + \"-width: \" + item.value + \"px),\" + item.value + ',' + item.type;\r\n    });\r\n    mdQueries = uniqArray(mdQueries);\r\n    const mdQueriesArray = [];\r\n\r\n    if (mdQueries.length) {\r\n      // Работаем с каждым брейкпоинтом\r\n      mdQueries.forEach(breakpoint => {\r\n        const paramsArray = breakpoint.split(\",\");\r\n        const mediaBreakpoint = paramsArray[1];\r\n        const mediaType = paramsArray[2];\r\n        const matchMedia = window.matchMedia(paramsArray[0]);\r\n        // Объекты с необходимыми условиями\r\n        const itemsArray = breakpointsArray.filter(function (item) {\r\n          if (item.value === mediaBreakpoint && item.type === mediaType) {\r\n            return true;\r\n          }\r\n        });\r\n        mdQueriesArray.push({\r\n          itemsArray,\r\n          matchMedia\r\n        })\r\n      });\r\n      return mdQueriesArray;\r\n    }\r\n  }\r\n}\n;// CONCATENATED MODULE: ./src/js/files/modules.js\nconst modules_flsModules = {};\n;// CONCATENATED MODULE: ./src/js/files/forms.js\n\r\n\r\nfunction formsFieldsInit(options = { viewpass: false, maskTel: false, valid: false }) {\r\n  document.body.addEventListener(\"focusin\", function (e) {\r\n    const targetElement = e.target;\r\n    if (targetElement.tagName === \"INPUT\" || targetElement.tagName === \"TEXTAREA\") {\r\n      targetElement.parentElement.classList.add(\"_form-focus\");\r\n      targetElement.classList.add(\"_form-focus\");\r\n      forms_formValidate.removeErrorClass(targetElement);\r\n      forms_formValidate.errorRemoveBlock(targetElement);\r\n    }\r\n  });\r\n  document.body.addEventListener(\"focusout\", function (e) {\r\n    const targetElement = e.target;\r\n    if (targetElement.tagName === \"INPUT\" || targetElement.tagName === \"TEXTAREA\") {\r\n      targetElement.parentElement.classList.remove(\"_form-focus\");\r\n      targetElement.classList.remove(\"_form-focus\");\r\n    }\r\n    targetElement.hasAttribute(\"data-validate\") ? forms_formValidate.validateInput(targetElement) : null;\r\n    // setTimeout(function () {\r\n    //   if (targetElement.value.length === 0) {\r\n    //     formValidate.removeErrorClass(targetElement);\r\n    //     formValidate.errorRemoveBlock(targetElement);\r\n    //   }\r\n    // }, 5000);\r\n  });\r\n  if (options.viewpass) {\r\n    document.addEventListener(\"click\", function (e) {\r\n      const targetElement = e.target;\r\n      if (targetElement.closest(`[class*=\"__viewpass\"]`)) {\r\n        let inputPasswordType = targetElement.classList.contains(\"_viewpass-active\") ? \"password\" : \"text\";\r\n        targetElement.parentElement.querySelector(\"input\").setAttribute(\"type\", inputPasswordType);\r\n        targetElement.classList.toggle(\"_viewpass-active\");\r\n      }\r\n    });\r\n  }\r\n  if (options.maskTel) {\r\n    const phoneInput = document.querySelectorAll(\"[data-tel-input]\");\r\n    if (phoneInput) {\r\n      phoneInput.forEach(input => {\r\n        input.addEventListener(\"input\", onPhoneInput);\r\n        input.addEventListener(\"keydown\", onPhoneKeyDown);\r\n        input.addEventListener(\"paste\", onPhonePaste);\r\n        input.addEventListener(\"focusin\", onInputFocus);\r\n        input.addEventListener(\"focusout\", onInputFocusOut);\r\n      });\r\n    }\r\n    function onPhoneInput(e) {\r\n      const input = e.target;\r\n      let inputNumbersValue = getInputNumbersValue(input);\r\n      let formattedInputValue = \"\";\r\n      let selecitonStart = input.selectionStart;\r\n      if (!inputNumbersValue) {\r\n        return input.value = \"\";\r\n      }\r\n      if (input.value.length != selecitonStart) {\r\n        if (e.data && /\\D/g.test(e.data)) {\r\n          input.value = inputNumbersValue;\r\n        }\r\n        return;\r\n      }\r\n      if ([\"7\", \"8\", \"9\"].indexOf(inputNumbersValue[0]) > -1) {\r\n        input.setAttribute(\"maxlength\", \"18\");\r\n        // Русский номер телефона\r\n        if (inputNumbersValue[0] == \"8\") {\r\n          input.setAttribute(\"maxlength\", \"17\");\r\n        }\r\n        if (inputNumbersValue[0] == \"9\") inputNumbersValue = \"7\" + inputNumbersValue;\r\n        let firstSymbols = (inputNumbersValue[0] == \"8\") ? \"8\" : \"+7\";\r\n        formattedInputValue = firstSymbols + \" \";\r\n        if (inputNumbersValue.length > 1) {\r\n          formattedInputValue += \"(\" + inputNumbersValue.substring(1, 4);\r\n        }\r\n        if (inputNumbersValue.length >= 5) {\r\n          formattedInputValue += \") \" + inputNumbersValue.substring(4, 7);\r\n        }\r\n        if (inputNumbersValue.length >= 8) {\r\n          formattedInputValue += \"-\" + inputNumbersValue.substring(7, 9);\r\n        }\r\n        if (inputNumbersValue.length >= 10) {\r\n          formattedInputValue += \"-\" + inputNumbersValue.substring(9, 11);\r\n        }\r\n      } else {\r\n        input.setAttribute(\"maxlength\", \"12\");\r\n        // НЕ Русский номер телефона\r\n        formattedInputValue = \"+\" + inputNumbersValue.substring(0, 11);\r\n      }\r\n      input.value = formattedInputValue;\r\n    }\r\n    function getInputNumbersValue(input) {\r\n      return input.value.replace(/\\D/g, \"\");\r\n    };\r\n    function onPhoneKeyDown(e) {\r\n      const input = e.target;\r\n      if (e.keyCode == 8 && getInputNumbersValue(input).length == 1) {\r\n        input.value = \"\";\r\n        if (input.hasAttribute(\"data-input-valid\")) {\r\n          forms_formValidate.removeValidClass(input);\r\n          forms_formValidate.removeErrorClass(input);\r\n        }\r\n      }\r\n    };\r\n    function onPhonePaste(e) {\r\n      const pasted = e.clipboardData || window.Clipboard;\r\n      const input = e.target;\r\n      const inputNumbersValue = getInputNumbersValue(input);\r\n      if (pasted) {\r\n        const pastedText = pasted.getData(\"Text\");\r\n        if (/\\D/g.test(pastedText)) {\r\n          input.value = inputNumbersValue;\r\n        }\r\n      };\r\n    };\r\n    function onInputFocus(e) {\r\n      const input = e.target;\r\n      if (input.dataset.inputLabel) {\r\n        input.parentElement.insertAdjacentHTML(\"beforeend\", `<div class=\"form__label-block\">${input.dataset.inputLabel}</div>`);\r\n      }\r\n    };\r\n    function onInputFocusOut(e) {\r\n      const input = e.target;\r\n      if (input.parentElement.querySelector('.form__label-block')) {\r\n        input.parentElement.removeChild(input.parentElement.querySelector('.form__label-block'));\r\n      }\r\n    };\r\n  }\r\n  // if (options.valid) {\r\n  //   const inputValid = document.querySelectorAll(\"[data-input-valid]\");\r\n  //   if (inputValid) {\r\n  //     inputValid.forEach(inputValidEl => {\r\n  //       inputValidEl.addEventListener(\"input\", function () {\r\n  //         if (inputValidEl.value !== \"\") {\r\n  //           inputValidEl.classList.add(\"_input-valid\", \"_input-valid-success\");\r\n  //         } else {\r\n  //           inputValidEl.classList.remove(\"_input-valid\", \"_input-valid-success\");\r\n  //           formValidate.removeErrorClass(inputValidEl);\r\n  //         }\r\n\r\n  //         if (inputValidEl.hasAttribute(\"data-min-length\")) {\r\n  //           const inputMinLength = inputValidEl.dataset.minLength;\r\n  //           if (inputValidEl.value.length < inputMinLength) {\r\n  //             inputValidEl.classList.remove(\"_input-valid-success\");\r\n  //             formValidate.addErrorClass(inputValidEl);\r\n  //             if (inputValidEl.value == \"\") {\r\n  //               formValidate.removeErrorClass(inputValidEl);\r\n  //             }\r\n  //           } else {\r\n  //             inputValidEl.classList.add(\"_input-valid-success\");\r\n  //             formValidate.removeErrorClass(inputValidEl);\r\n  //           }\r\n  //         }\r\n\r\n  //         if (inputValidEl.hasAttribute(\"data-tel-input\")) {\r\n  //           const inputPhoneMask = inputValidEl.getAttribute(\"maxlength\");\r\n  //           if (inputValidEl.value.length < inputPhoneMask) {\r\n  //             inputValidEl.classList.remove(\"_input-valid-success\");\r\n  //             formValidate.addErrorClass(inputValidEl);\r\n  //             if (inputValidEl.value.length == 0) {\r\n  //               formValidate.removeErrorClass(inputValidEl);\r\n  //             }\r\n  //           } else {\r\n  //             inputValidEl.classList.add(\"_input-valid-success\");\r\n  //             formValidate.removeErrorClass(inputValidEl);\r\n  //           }\r\n  //         }\r\n  //       })\r\n\r\n  //     })\r\n  //   }\r\n  // }\r\n\r\n  if (options.valid) {\r\n    const inputValid = document.querySelectorAll(\"[data-input-valid]\");\r\n    if (inputValid) {\r\n      inputValid.forEach(inputValidEl => {\r\n        inputValidEl.addEventListener(\"input\", function () {\r\n          if (inputValidEl.value !== \"\") {\r\n            forms_formValidate.addValidClass(inputValidEl);\r\n            forms_formValidate.addValidSuccessClass(inputValidEl);\r\n          } else {\r\n            forms_formValidate.removeErrorClass(inputValidEl);\r\n            forms_formValidate.removeValidClass(inputValidEl);\r\n            forms_formValidate.removeValidSuccessClass(inputValidEl);\r\n          }\r\n\r\n          if (inputValidEl.hasAttribute(\"data-min-length\")) {\r\n            const inputMinLength = inputValidEl.dataset.minLength;\r\n            if (inputValidEl.value.length < inputMinLength) {\r\n              forms_formValidate.removeValidSuccessClass(inputValidEl);\r\n              forms_formValidate.addErrorClass(inputValidEl);\r\n              if (inputValidEl.value == \"\") {\r\n                forms_formValidate.removeErrorClass(inputValidEl);\r\n              }\r\n            } else {\r\n              forms_formValidate.addValidSuccessClass(inputValidEl);\r\n              forms_formValidate.removeErrorClass(inputValidEl);\r\n            }\r\n          }\r\n\r\n          if (inputValidEl.hasAttribute(\"data-max-length\")) {\r\n            const inputMaxLength = inputValidEl.dataset.maxLength;\r\n            if (inputValidEl.value.length > inputMaxLength) {\r\n              forms_formValidate.removeValidSuccessClass(inputValidEl);\r\n              forms_formValidate.addErrorClass(inputValidEl);\r\n            } else {\r\n              forms_formValidate.addValidSuccessClass(inputValidEl);\r\n              forms_formValidate.removeErrorClass(inputValidEl);\r\n              forms_formValidate.addValidClass(inputValidEl);\r\n            }\r\n            if (inputValidEl.value == '') {\r\n              forms_formValidate.removeValidClass(inputValidEl);\r\n              forms_formValidate.removeValidSuccessClass(inputValidEl);\r\n            }\r\n          }\r\n\r\n          if (inputValidEl.hasAttribute(\"data-tel-input\")) {\r\n            const inputPhoneMask = inputValidEl.getAttribute(\"maxlength\");\r\n            if (inputValidEl.value.length < inputPhoneMask) {\r\n              forms_formValidate.removeValidSuccessClass(inputValidEl);\r\n              forms_formValidate.addErrorClass(inputValidEl);\r\n              if (inputValidEl.value == \"\") {\r\n                forms_formValidate.removeErrorClass(inputValidEl);\r\n              }\r\n            } else {\r\n              inputValidEl.classList.add(\"_input-valid-success\");\r\n              forms_formValidate.removeErrorClass(inputValidEl);\r\n            }\r\n          }\r\n        })\r\n\r\n      })\r\n    }\r\n  }\r\n\r\n};\r\nlet forms_formValidate = {\r\n  getErrors(form) {\r\n    let error = 0;\r\n    const formRequired = form.querySelectorAll(\"[data-required]\");\r\n    formRequired.forEach(input => {\r\n      error += this.validateInput(input);\r\n    });\r\n\r\n    // const passwordConfirm = form.querySelector('[data-required=\"pass-confirm\"]');\r\n    // if (passwordConfirm) {\r\n    //   error += this.checkPasswordConfirm(passwordConfirm);\r\n    // }\r\n\r\n    return error;\r\n  },\r\n\r\n  // checkPasswordConfirm(input) {\r\n  //   let error = 0;\r\n  //   const passwordInput = input.closest('[data-pass-confirms]').querySelector('[data-pass-input]');\r\n\r\n  //   if (passwordInput.value !== input.value) {\r\n  //     this.errorAddBlock(input, `Пароли не совпадают`);\r\n  //     this.addErrorClass(input);\r\n  //     error++;\r\n  //   }\r\n  //   return error;\r\n  // },\r\n\r\n  validateInput(input) {\r\n    let error = 0;\r\n    if (input.dataset.required === \"tel\") {\r\n      if (input.value.length < input.getAttribute(\"maxlength\")) {\r\n        forms_formValidate.errorAddBlock(input, `Введите корректный номер телефона`);\r\n        forms_formValidate.addErrorClass(input);\r\n        error++;\r\n      }\r\n    }\r\n    if (input.dataset.maxLength) {\r\n      if (input.value.length > input.dataset.maxLength) {\r\n        forms_formValidate.errorAddBlock(input, `Максимальное количество символов ${input.dataset.maxLength}`);\r\n        forms_formValidate.addErrorClass(input);\r\n        error++;\r\n      }\r\n    }\r\n    if (input.dataset.minLength) {\r\n      if (input.value.length < input.dataset.minLength) {\r\n        forms_formValidate.errorAddBlock(input, `Минимальное количество символов ${input.dataset.minLength}`);\r\n        forms_formValidate.addErrorClass(input);\r\n        error++;\r\n      }\r\n    }\r\n    if (input.dataset.required === \"email\") {\r\n      if (forms_formValidate.emailTest(input)) {\r\n        forms_formValidate.errorAddBlock(input, `Введите корректный email`);\r\n        forms_formValidate.addErrorClass(input);\r\n        error++;\r\n      }\r\n    } else if (input.getAttribute(\"type\") === \"checkbox\" && input.checked === false) {\r\n      forms_formValidate.addErrorClass(input);\r\n      error++;\r\n    }\r\n    if (input.value === \"\") {\r\n      forms_formValidate.errorAddBlock(input, \"Заполните это поле\");\r\n      forms_formValidate.addErrorClass(input);\r\n      error++;\r\n    }\r\n    return error;\r\n  },\r\n  addErrorClass(input) {\r\n    input.parentElement.classList.add(\"_form-error\");\r\n    input.classList.add(\"_form-error\");\r\n  },\r\n  removeErrorClass(input) {\r\n    input.parentElement.classList.remove(\"_form-error\");\r\n    input.classList.remove(\"_form-error\");\r\n  },\r\n  emailTest(input) {\r\n    return !/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,8})+$/.test(input.value);\r\n  },\r\n  errorAddBlock(input, text) {\r\n    const errorBlock = input.parentElement.querySelector(\".input-error\");\r\n    if (errorBlock) input.parentElement.removeChild(errorBlock);\r\n    input.parentElement.insertAdjacentHTML(\"beforeend\", `<div class=\"input-error\">${text}</div>`)\r\n  },\r\n  errorRemoveBlock(input) {\r\n    if (input.parentElement.querySelector(\".input-error\")) {\r\n      input.parentElement.removeChild(input.parentElement.querySelector(\".input-error\"));\r\n    }\r\n  },\r\n  addValidClass(input) {\r\n    input.classList.add(\"_input-valid\");\r\n  },\r\n  removeValidClass(input) {\r\n    input.classList.remove(\"_input-valid\");\r\n  },\r\n  addValidSuccessClass(input) {\r\n    input.classList.add(\"_input-valid-success\");\r\n  },\r\n  removeValidSuccessClass(input) {\r\n    input.classList.remove(\"_input-valid-success\");\r\n  },\r\n}\r\nfunction formSubmit() {\r\n  const forms = document.forms;\r\n  if (forms.length) {\r\n    for (const form of forms) {\r\n      form.addEventListener(\"submit\", function (e) {\r\n        const form = e.target;\r\n        formSubmitActions(form, e);\r\n      });\r\n    }\r\n  }\r\n  async function formSubmitActions(form, e) {\r\n    const error = forms_formValidate.getErrors(form);\r\n    if (error === 0) {\r\n      const ajax = form.hasAttribute(\"data-ajax\");\r\n      if (ajax) {\r\n        e.preventDefault();\r\n        const formAction = form.getAttribute(\"action\") ? form.getAttribute(\"action\").trim() : \"#\";\r\n        const formMethod = form.getAttribute(\"method\") ? form.getAttribute(\"method\").trim() : \"GET\";\r\n        const formData = new FormData(form);\r\n\r\n        form.classList.add(\"_sending\");\r\n\r\n        const response = await fetch(formAction, {\r\n          method: formMethod,\r\n          body: formData\r\n        });\r\n        if (response.ok) {\r\n          // let responseResult = await response.json();\r\n          formSent(form);\r\n          form.classList.remove(\"_sending\");\r\n        } else {\r\n          form.setAttribute(\"data-response-error\", \"#response-error\");\r\n          if (flsModules.popup) {\r\n            const popup = form.dataset.responseError;\r\n            popup ? flsModules.popup.open(popup) : null;\r\n          };\r\n          form.removeAttribute(\"data-response-error\");\r\n          form.classList.remove(\"_sending\");\r\n        }\r\n      } else if (form.hasAttribute(\"data-dev\")) {\r\n        e.preventDefault();\r\n        formSent(form);\r\n      }\r\n    } else {\r\n      e.preventDefault();\r\n    }\r\n  }\r\n\r\n  function formSent(form, responseResult = '') {\r\n    document.dispatchEvent(new CustomEvent(\"formSent\", {\r\n      detail: {\r\n        form: form\r\n      }\r\n    }));\r\n    if (flsModules.popup) {\r\n      const popup = form.dataset.popupMessage;\r\n      popup ? flsModules.popup.open(popup) : null;\r\n    }\r\n    form.reset();\r\n  };\r\n}\r\n\n;// CONCATENATED MODULE: ./src/js/files/select.js\n// Подключение функционала \"Чертоги Фрилансера\"\r\n\r\n\r\n// import { formValidate } from \"../files/forms/forms.js\";\r\n\r\n// Подключение файла стилей\r\n// Базовые стили состоят в src/scss/forms.scss\r\n// Файл базовых стилей src/scss/forms/select.scss\r\n/*\r\nДокументация:\r\nСниппет (HTML): sel\r\n*/\r\n/*\r\n//Настройка\r\nДля селектора (select):\r\nclass=\"имя класса\" -модификатор к конкретному селекту\r\nmultiple – мультивыбор\r\ndata-class-modif= \"имя модификатора\"\r\ndata-tags – режим тегов, только для (только для multiple)\r\ndata-scroll -включить прокрутку для выпадающего списка дополнительно можно подключить кастомный скролл simplebar в app.js. Указанное число для атрибута ограничит высоту\r\ndata-checkbox – стилизация элементов по checkbox (только для multiple)\r\ndata-show-selected – выключает сокрытие выбранного элемента\r\ndata-search -позволяет искать по выпадающему списку\r\ndata-open – селект открыт сразу\r\ndata-submit – отправляет форму при смене селлекта\r\n\r\ndata-one-select -селекты внутри оболочки с атрибутом будут показываться только по одному\r\ndata-pseudo-label – добавляет псевдоэлемент к заголовку селлекта с указанным текстом\r\n\r\nДля плейсхолдера (плейсхолдер – это option из value=\"\"):\r\ndata-label для плейсхолдера, добавляет label к селектору.\r\ndata-show для плейсхолдера, показывает его в списке (только для единичного выбора)\r\n\r\nДля элемента (option):\r\ndata-class=\"имя класса\" -добавляет класс\r\ndata-asset=\"путь к картинке или текст\" -добавляет структуру 2х колонок и данным\r\ndata-href=\"адрес ссылки\" -добавляет ссылку в элемент списка\r\ndata-href-blank – откроет ссылку в новом окне\r\n*/\r\n/*\r\n//Возможные доработки:\r\nпопап на мобилке\r\n*/\r\n// Класс постройки Select\r\nclass SelectConstructor {\r\n  constructor(props, data = null) {\r\n    let defaultConfig = {\r\n      init: true,\r\n      logging: true,\r\n      speed: 150\r\n    }\r\n    this.config = Object.assign(defaultConfig, props);\r\n    // CSS классы модуля\r\n    this.selectClasses = {\r\n      classSelect: \"select\", // Главный блок\r\n      classSelectBody: \"select__body\", // Тело селекта\r\n      classSelectTitle: \"select__title\", // Заголовок\r\n      classSelectValue: \"select__value\", // Значения у заголовка\r\n      classSelectLabel: \"select__label\", // Лейбл\r\n      classSelectInput: \"select__input\", // Поле ввода\r\n      classSelectText: \"select__text\", // Оболочка текстовых данных\r\n      classSelectLink: \"select__link\", // Ссылка в элементе\r\n      classSelectOptions: \"select__options\", // Выпадающий список\r\n      classSelectOptionsScroll: \"select__scroll\", // Оболочка при скролле\r\n      classSelectOption: \"select__option\", // Пункт\r\n      classSelectContent: \"select__content\", // Оболочка контента в заголовке\r\n      classSelectRow: \"select__row\", // Ряд\r\n      classSelectData: \"select__asset\", // Дополнительные данные\r\n      classSelectDisabled: \"_select-disabled\", // Запрещено\r\n      classSelectTag: \"_select-tag\", // Класс тега\r\n      classSelectOpen: \"_select-open\", // Список открыт\r\n      classSelectActive: \"_select-active\", // Список выбран\r\n      classSelectFocus: \"_select-focus\", // Список в фокусе\r\n      classSelectMultiple: \"_select-multiple\", // Мульти-выбор\r\n      classSelectCheckBox: \"_select-checkbox\", // Стиль чекбоксу\r\n      classSelectOptionSelected: \"_select-selected\", // Выбранный пункт\r\n      classSelectPseudoLabel: \"_select-pseudo-label\", // Псевдо-лейбл\r\n    }\r\n    this._this = this;\r\n    // Запуск инициализации\r\n    if (this.config.init) {\r\n      // Получение всех select на странице\r\n      const selectItems = data ? document.querySelectorAll(data) : document.querySelectorAll('select');\r\n      if (selectItems.length) {\r\n        this.selectsInit(selectItems);\r\n      } else {\r\n      }\r\n    }\r\n  }\r\n  // Конструктор CSS класса\r\n  getSelectClass(className) {\r\n    return `.${className}`;\r\n  }\r\n  // Геттер элементов псевдоселекта\r\n  getSelectElement(selectItem, className) {\r\n    return {\r\n      originalSelect: selectItem.querySelector('select'),\r\n      selectElement: selectItem.querySelector(this.getSelectClass(className)),\r\n    }\r\n  }\r\n  // Функция инициализации всех селектов\r\n  selectsInit(selectItems) {\r\n    selectItems.forEach((originalSelect, index) => {\r\n      this.selectInit(originalSelect, index + 1);\r\n    });\r\n    // Обработчики событий...\r\n    // ...при клике\r\n    document.addEventListener('click', function (e) {\r\n      this.selectsActions(e);\r\n    }.bind(this));\r\n    // ...при нажатии клавиши\r\n    document.addEventListener('keydown', function (e) {\r\n      this.selectsActions(e);\r\n    }.bind(this));\r\n    // ...при фокусе\r\n    document.addEventListener('focusin', function (e) {\r\n      this.selectsActions(e);\r\n    }.bind(this));\r\n    // ...при потере фокуса\r\n    document.addEventListener('focusout', function (e) {\r\n      this.selectsActions(e);\r\n    }.bind(this));\r\n  }\r\n  // Функция инициализации конкретного селекта\r\n  selectInit(originalSelect, index) {\r\n    const _this = this;\r\n    // Создаем оболочку\r\n    let selectItem = document.createElement(\"div\");\r\n    selectItem.classList.add(this.selectClasses.classSelect);\r\n    // Выводим оболочку перед оригинальным селектом\r\n    originalSelect.parentNode.insertBefore(selectItem, originalSelect);\r\n    // Помещаем оригинальный селект в оболочку\r\n    selectItem.appendChild(originalSelect);\r\n    // Скрываем оригинальный селект\r\n    originalSelect.hidden = true;\r\n    // Присваиваем уникальный ID\r\n    index ? originalSelect.dataset.id = index : null;\r\n\r\n    // Работа с плейсхолдером\r\n    if (this.getSelectPlaceholder(originalSelect)) {\r\n      // Запоминаем плейсхолдер\r\n      originalSelect.dataset.placeholder = this.getSelectPlaceholder(originalSelect).value;\r\n      // Если включен режим label\r\n      if (this.getSelectPlaceholder(originalSelect).label.show) {\r\n        const selectItemTitle = this.getSelectElement(selectItem, this.selectClasses.classSelectTitle).selectElement;\r\n        selectItemTitle.insertAdjacentHTML('afterbegin', `<span class=\"${this.selectClasses.classSelectLabel}\">${this.getSelectPlaceholder(originalSelect).label.text ? this.getSelectPlaceholder(originalSelect).label.text : this.getSelectPlaceholder(originalSelect).value}</span>`);\r\n      }\r\n    }\r\n    // Конструктор основных элементов\r\n    selectItem.insertAdjacentHTML('beforeend', `<div class=\"${this.selectClasses.classSelectBody}\"><div hidden class=\"${this.selectClasses.classSelectOptions}\"></div></div>`);\r\n    // Запускаем конструктор псевдоселекта\r\n    this.selectBuild(originalSelect);\r\n\r\n    // Запоминаем скорость\r\n    originalSelect.dataset.speed = originalSelect.dataset.speed ? originalSelect.dataset.speed : this.config.speed;\r\n    this.config.speed = +originalSelect.dataset.speed;\r\n\r\n    // Событие при изменении исходного select\r\n    originalSelect.addEventListener('change', function (e) {\r\n      _this.selectChange(e);\r\n    });\r\n  }\r\n  // Конструктор псевдоселекта\r\n  selectBuild(originalSelect) {\r\n    const selectItem = originalSelect.parentElement;\r\n    // Добавляем ID селекта\r\n    selectItem.dataset.id = originalSelect.dataset.id;\r\n    // Получаем класс оригинального селекта, создаем модификатор и добавляем его\r\n    originalSelect.dataset.classModif ? selectItem.classList.add(`select_${originalSelect.dataset.classModif}`) : null;\r\n    // Если множественный выбор, добавляем класс\r\n    originalSelect.multiple ? selectItem.classList.add(this.selectClasses.classSelectMultiple) : selectItem.classList.remove(this.selectClasses.classSelectMultiple);\r\n    // Стилизация элементов под checkbox (только для multiple)\r\n    originalSelect.hasAttribute('data-checkbox') && originalSelect.multiple ? selectItem.classList.add(this.selectClasses.classSelectCheckBox) : selectItem.classList.remove(this.selectClasses.classSelectCheckBox);\r\n    // Сеттер значение заголовка селекта\r\n    this.setSelectTitleValue(selectItem, originalSelect);\r\n    // Сеттер элементов списка (options)\r\n    this.setOptions(selectItem, originalSelect);\r\n    // Если включена опция поиска data-search, запускаем обработчик\r\n    originalSelect.hasAttribute('data-search') ? this.searchActions(selectItem) : null;\r\n    // Если указана настройка data-open, открываем селект\r\n    originalSelect.hasAttribute('data-open') ? this.selectAction(selectItem) : null;\r\n    // Обработчик disabled\r\n    this.selectDisabled(selectItem, originalSelect);\r\n  }\r\n  // Функция реакций на события\r\n  selectsActions(e) {\r\n    const targetElement = e.target;\r\n    const targetType = e.type;\r\n    if (targetElement.closest(this.getSelectClass(this.selectClasses.classSelect)) || targetElement.closest(this.getSelectClass(this.selectClasses.classSelectTag))) {\r\n      const selectItem = targetElement.closest('.select') ? targetElement.closest('.select') : document.querySelector(`.${this.selectClasses.classSelect}[data-id=\"${targetElement.closest(this.getSelectClass(this.selectClasses.classSelectTag)).dataset.selectId}\"]`);\r\n      const originalSelect = this.getSelectElement(selectItem).originalSelect;\r\n      if (targetType === 'click') {\r\n        if (!originalSelect.disabled) {\r\n          if (targetElement.closest(this.getSelectClass(this.selectClasses.classSelectTag))) {\r\n            // Обработка клика на тег\r\n            const targetTag = targetElement.closest(this.getSelectClass(this.selectClasses.classSelectTag));\r\n            const optionItem = document.querySelector(`.${this.selectClasses.classSelect}[data-id=\"${targetTag.dataset.selectId}\"] .select__option[data-value=\"${targetTag.dataset.value}\"]`);\r\n            this.optionAction(selectItem, originalSelect, optionItem);\r\n          } else if (targetElement.closest(this.getSelectClass(this.selectClasses.classSelectTitle))) {\r\n            // Обработка клика на заголовок селекта\r\n            this.selectAction(selectItem);\r\n          } else if (targetElement.closest(this.getSelectClass(this.selectClasses.classSelectOption))) {\r\n            // Обработка клика на элемент селекта\r\n            const optionItem = targetElement.closest(this.getSelectClass(this.selectClasses.classSelectOption));\r\n            this.optionAction(selectItem, originalSelect, optionItem);\r\n          }\r\n        }\r\n      } else if (targetType === 'focusin' || targetType === 'focusout') {\r\n        if (targetElement.closest(this.getSelectClass(this.selectClasses.classSelect))) {\r\n          targetType === 'focusin' ? selectItem.classList.add(this.selectClasses.classSelectFocus) : selectItem.classList.remove(this.selectClasses.classSelectFocus);\r\n        }\r\n      } else if (targetType === 'keydown' && e.code === 'Escape') {\r\n        this.selectsСlose();\r\n      }\r\n    } else {\r\n      this.selectsСlose();\r\n    }\r\n  }\r\n  // Функция закрытия всех селектов\r\n  selectsСlose(selectOneGroup) {\r\n    const selectsGroup = selectOneGroup ? selectOneGroup : document;\r\n    const selectActiveItems = selectsGroup.querySelectorAll(`${this.getSelectClass(this.selectClasses.classSelect)}${this.getSelectClass(this.selectClasses.classSelectOpen)}`);\r\n    if (selectActiveItems.length) {\r\n      selectActiveItems.forEach(selectActiveItem => {\r\n        this.selectСlose(selectActiveItem);\r\n      });\r\n    }\r\n  }\r\n  // Функция закрытия конкретного селекта\r\n  selectСlose(selectItem) {\r\n    const originalSelect = this.getSelectElement(selectItem).originalSelect;\r\n    const selectOptions = this.getSelectElement(selectItem, this.selectClasses.classSelectOptions).selectElement;\r\n    if (!selectOptions.classList.contains('_slide')) {\r\n      selectItem.classList.remove(this.selectClasses.classSelectOpen);\r\n      _slideUp(selectOptions, originalSelect.dataset.speed);\r\n      setTimeout(() => {\r\n        selectItem.style.zIndex = '';\r\n      }, originalSelect.dataset.speed);\r\n    }\r\n  }\r\n  // Функция открытия / закрытия конкретного селекта\r\n  selectAction(selectItem) {\r\n    const originalSelect = this.getSelectElement(selectItem).originalSelect;\r\n    const selectOptions = this.getSelectElement(selectItem, this.selectClasses.classSelectOptions).selectElement;\r\n    const selectOpenzIndex = originalSelect.dataset.zIndex ? originalSelect.dataset.zIndex : 3;\r\n\r\n    // Определяем, где отобразить выпадающий список\r\n    this.setOptionsPosition(selectItem);\r\n\r\n    // Если селектив размещены в элементе с дата атрибутом data-one-select\r\n    // закрываем все открытые селективный\r\n    if (originalSelect.closest('[data-one-select]')) {\r\n      const selectOneGroup = originalSelect.closest('[data-one-select]');\r\n      this.selectsСlose(selectOneGroup);\r\n    }\r\n\r\n    setTimeout(() => {\r\n      if (!selectOptions.classList.contains('_slide')) {\r\n        selectItem.classList.toggle(this.selectClasses.classSelectOpen);\r\n        _slideToggle(selectOptions, originalSelect.dataset.speed);\r\n\r\n        if (selectItem.classList.contains(this.selectClasses.classSelectOpen)) {\r\n          selectItem.style.zIndex = selectOpenzIndex;\r\n        } else {\r\n          setTimeout(() => {\r\n            selectItem.style.zIndex = '';\r\n          }, originalSelect.dataset.speed);\r\n        }\r\n      }\r\n    }, 0);\r\n  }\r\n  // Сеттер значение заголовка селекта\r\n  setSelectTitleValue(selectItem, originalSelect) {\r\n    const selectItemBody = this.getSelectElement(selectItem, this.selectClasses.classSelectBody).selectElement;\r\n    const selectItemTitle = this.getSelectElement(selectItem, this.selectClasses.classSelectTitle).selectElement;\r\n    if (selectItemTitle) selectItemTitle.remove();\r\n    selectItemBody.insertAdjacentHTML(\"afterbegin\", this.getSelectTitleValue(selectItem, originalSelect));\r\n    originalSelect.hasAttribute('data-search') ? this.searchActions(selectItem) : null;\r\n  }\r\n  // Конструктор значения заголовка\r\n  getSelectTitleValue(selectItem, originalSelect) {\r\n    // Получаем выбранные текстовые значения\r\n    let selectTitleValue = this.getSelectedOptionsData(originalSelect, 2).html;\r\n    // Обработка значений мультивыбор\r\n    // Если включен режим тегов (указаны настройки data-tags)\r\n    if (originalSelect.multiple && originalSelect.hasAttribute('data-tags')) {\r\n      selectTitleValue = this.getSelectedOptionsData(originalSelect).elements.map(option => `<span role=\"button\" data-select-id=\"${selectItem.dataset.id}\" data-value=\"${option.value}\" class=\"_select-tag\">${this.getSelectElementContent(option)}</span>`).join('');\r\n      // Если вывод тегов во внешний блок\r\n      if (originalSelect.dataset.tags && document.querySelector(originalSelect.dataset.tags)) {\r\n        document.querySelector(originalSelect.dataset.tags).innerHTML = selectTitleValue;\r\n        if (originalSelect.hasAttribute('data-search')) selectTitleValue = false;\r\n      }\r\n    }\r\n    // Значение или плейсхолдер\r\n    selectTitleValue = selectTitleValue.length ? selectTitleValue : (originalSelect.dataset.placeholder ? originalSelect.dataset.placeholder : '');\r\n    // Если включен режим pseudo\r\n    let pseudoAttribute = '';\r\n    let pseudoAttributeClass = '';\r\n    if (originalSelect.hasAttribute('data-pseudo-label')) {\r\n      pseudoAttribute = originalSelect.dataset.pseudoLabel ? ` data-pseudo-label=\"${originalSelect.dataset.pseudoLabel}\"` : ` data-pseudo-label=\"Заповніть атрибут\"`;\r\n      pseudoAttributeClass = ` ${this.selectClasses.classSelectPseudoLabel}`;\r\n    }\r\n    // Если есть значение, добавляем класс\r\n    this.getSelectedOptionsData(originalSelect).values.length ? selectItem.classList.add(this.selectClasses.classSelectActive) : selectItem.classList.remove(this.selectClasses.classSelectActive);\r\n    // Возвращаем поле ввода для поиска или текст\r\n    if (originalSelect.hasAttribute('data-search')) {\r\n      // Выводим поле ввода для поиска\r\n      return `<div class=\"${this.selectClasses.classSelectTitle}\"><span${pseudoAttribute} class=\"${this.selectClasses.classSelectValue}\"><input autocomplete=\"off\" type=\"text\" placeholder=\"${selectTitleValue}\" data-placeholder=\"${selectTitleValue}\" class=\"${this.selectClasses.classSelectInput}\"></span></div>`;\r\n    } else {\r\n      // Если выбран элемент со своим классом\r\n      const customClass = this.getSelectedOptionsData(originalSelect).elements.length && this.getSelectedOptionsData(originalSelect).elements[0].dataset.class ? ` ${this.getSelectedOptionsData(originalSelect).elements[0].dataset.class}` : '';\r\n      // Выводим текстовое значение\r\n      return `<button type=\"button\" class=\"${this.selectClasses.classSelectTitle}\"><span${pseudoAttribute} class=\"${this.selectClasses.classSelectValue}${pseudoAttributeClass}\"><span class=\"${this.selectClasses.classSelectContent}${customClass}\">${selectTitleValue}</span></span></button>`;\r\n    }\r\n  }\r\n  // Конструктор данных для значения заголовка\r\n  getSelectElementContent(selectOption) {\r\n    // Если для элемента указан вывод картинки или текста, перестраиваем конструкцию\r\n    const selectOptionData = selectOption.dataset.asset ? `${selectOption.dataset.asset}` : '';\r\n    const selectOptionDataHTML = selectOptionData.indexOf('img') >= 0 ? `<img src=\"${selectOptionData}\" alt=\"\">` : selectOptionData;\r\n    let selectOptionContentHTML = ``;\r\n    selectOptionContentHTML += selectOptionData ? `<span class=\"${this.selectClasses.classSelectRow}\">` : '';\r\n    selectOptionContentHTML += selectOptionData ? `<span class=\"${this.selectClasses.classSelectData}\">` : '';\r\n    selectOptionContentHTML += selectOptionData ? selectOptionDataHTML : '';\r\n    selectOptionContentHTML += selectOptionData ? `</span>` : '';\r\n    selectOptionContentHTML += selectOptionData ? `<span class=\"${this.selectClasses.classSelectText}\">` : '';\r\n    selectOptionContentHTML += selectOption.textContent;\r\n    selectOptionContentHTML += selectOptionData ? `</span>` : '';\r\n    selectOptionContentHTML += selectOptionData ? `</span>` : '';\r\n    return selectOptionContentHTML;\r\n  }\r\n  // Получение данных плейсхолдера\r\n  getSelectPlaceholder(originalSelect) {\r\n    const selectPlaceholder = Array.from(originalSelect.options).find(option => !option.value);\r\n    if (selectPlaceholder) {\r\n      return {\r\n        value: selectPlaceholder.textContent,\r\n        show: selectPlaceholder.hasAttribute(\"data-show\"),\r\n        label: {\r\n          show: selectPlaceholder.hasAttribute(\"data-label\"),\r\n          text: selectPlaceholder.dataset.label\r\n        }\r\n      }\r\n    }\r\n  }\r\n  // Получение данных из выбранных элементов\r\n  getSelectedOptionsData(originalSelect, type) {\r\n    //Получаем все выбранные объекты из select\r\n    let selectedOptions = [];\r\n    if (originalSelect.multiple) {\r\n      // Если мультивыбор\r\n      // Забираем плейсхолдер, получаем остальные избранные элементы\r\n      selectedOptions = Array.from(originalSelect.options).filter(option => option.value).filter(option => option.selected);\r\n    } else {\r\n      // Если единичный выбор\r\n      selectedOptions.push(originalSelect.options[originalSelect.selectedIndex]);\r\n    }\r\n    return {\r\n      elements: selectedOptions.map(option => option),\r\n      values: selectedOptions.filter(option => option.value).map(option => option.value),\r\n      html: selectedOptions.map(option => this.getSelectElementContent(option))\r\n    }\r\n  }\r\n  // Конструктор элементов списка\r\n  getOptions(originalSelect) {\r\n    // Настройка скролла элементов\r\n    const selectOptionsScroll = originalSelect.hasAttribute('data-scroll') ? `data-simplebar` : '';\r\n    const customMaxHeightValue = +originalSelect.dataset.scroll ? +originalSelect.dataset.scroll : null;\r\n    // Получаем элементы списка\r\n    let selectOptions = Array.from(originalSelect.options);\r\n    if (selectOptions.length > 0) {\r\n      let selectOptionsHTML = ``;\r\n      // Если указана настройка data-show, показываем плейсхолдер в списке\r\n      if ((this.getSelectPlaceholder(originalSelect) && !this.getSelectPlaceholder(originalSelect).show) || originalSelect.multiple) {\r\n        selectOptions = selectOptions.filter(option => option.value);\r\n      }\r\n      // Строим и выводим основную конструкцию\r\n      selectOptionsHTML += `<div ${selectOptionsScroll} ${selectOptionsScroll ? `style=\"max-height: ${customMaxHeightValue}px\"` : ''} class=\"${this.selectClasses.classSelectOptionsScroll}\">`;\r\n      selectOptions.forEach(selectOption => {\r\n        // Получаем конструкцию конкретного элемента списка\r\n        selectOptionsHTML += this.getOption(selectOption, originalSelect);\r\n      });\r\n      selectOptionsHTML += `</div>`;\r\n      return selectOptionsHTML;\r\n    }\r\n  }\r\n  // Конструктор конкретного елемента списку\r\n  getOption(selectOption, originalSelect) {\r\n    // Если элемент выбран и включен режим мультивыбора, добавляем класс\r\n    const selectOptionSelected = selectOption.selected && originalSelect.multiple ? ` ${this.selectClasses.classSelectOptionSelected}` : '';\r\n    // Если элемент выбран и нет настройки data-show-selected, скрываем элемент\r\n    const selectOptionHide = selectOption.selected && !originalSelect.hasAttribute('data-show-selected') && !originalSelect.multiple ? `hidden` : ``;\r\n    // Если для элемента указанный класс добавляем\r\n    const selectOptionClass = selectOption.dataset.class ? ` ${selectOption.dataset.class}` : '';\r\n    // Если указан режим ссылки\r\n    const selectOptionLink = selectOption.dataset.href ? selectOption.dataset.href : false;\r\n    const selectOptionLinkTarget = selectOption.hasAttribute('data-href-blank') ? `target=\"_blank\"` : '';\r\n    // Строим и возвращаем конструкцию элемента\r\n    let selectOptionHTML = ``;\r\n    selectOptionHTML += selectOptionLink ? `<a ${selectOptionLinkTarget} ${selectOptionHide} href=\"${selectOptionLink}\" data-value=\"${selectOption.value}\" class=\"${this.selectClasses.classSelectOption}${selectOptionClass}${selectOptionSelected}\">` : `<button ${selectOptionHide} class=\"${this.selectClasses.classSelectOption}${selectOptionClass}${selectOptionSelected}\" data-value=\"${selectOption.value}\" type=\"button\">`;\r\n    selectOptionHTML += this.getSelectElementContent(selectOption);\r\n    selectOptionHTML += selectOptionLink ? `</a>` : `</button>`;\r\n    return selectOptionHTML;\r\n  }\r\n  // Сеттер списков (options)\r\n  setOptions(selectItem, originalSelect) {\r\n    // Получаем объект тела псевдоселлекта\r\n    const selectItemOptions = this.getSelectElement(selectItem, this.selectClasses.classSelectOptions).selectElement;\r\n    // Запускаем конструктор элементов списка (options) и добавляем в тело псевдоселектора\r\n    selectItemOptions.innerHTML = this.getOptions(originalSelect);\r\n  }\r\n  // Определяем, где отобразить выпадающий список\r\n  setOptionsPosition(selectItem) {\r\n    const originalSelect = this.getSelectElement(selectItem).originalSelect;\r\n    const selectOptions = this.getSelectElement(selectItem, this.selectClasses.classSelectOptions).selectElement;\r\n    const selectItemScroll = this.getSelectElement(selectItem, this.selectClasses.classSelectOptionsScroll).selectElement;\r\n    const customMaxHeightValue = +originalSelect.dataset.scroll ? `${+originalSelect.dataset.scroll}px` : ``;\r\n    const selectOptionsPosMargin = +originalSelect.dataset.optionsMargin ? +originalSelect.dataset.optionsMargin : 10;\r\n\r\n    if (!selectItem.classList.contains(this.selectClasses.classSelectOpen)) {\r\n      selectOptions.hidden = false;\r\n      const selectItemScrollHeight = selectItemScroll.offsetHeight ? selectItemScroll.offsetHeight : parseInt(window.getComputedStyle(selectItemScroll).getPropertyValue('max-height'));\r\n      const selectOptionsHeight = selectOptions.offsetHeight > selectItemScrollHeight ? selectOptions.offsetHeight : selectItemScrollHeight + selectOptions.offsetHeight;\r\n      const selectOptionsScrollHeight = selectOptionsHeight - selectItemScrollHeight;\r\n      selectOptions.hidden = true;\r\n\r\n      const selectItemHeight = selectItem.offsetHeight;\r\n      const selectItemPos = selectItem.getBoundingClientRect().top;\r\n      const selectItemTotal = selectItemPos + selectOptionsHeight + selectItemHeight + selectOptionsScrollHeight;\r\n      const selectItemResult = window.innerHeight - (selectItemTotal + selectOptionsPosMargin);\r\n\r\n      if (selectItemResult < 0) {\r\n        const newMaxHeightValue = selectOptionsHeight + selectItemResult;\r\n        if (newMaxHeightValue < 100) {\r\n          selectItem.classList.add('select--show-top');\r\n          selectItemScroll.style.maxHeight = selectItemPos < selectOptionsHeight ? `${selectItemPos - (selectOptionsHeight - selectItemPos)}px` : customMaxHeightValue;\r\n        } else {\r\n          selectItem.classList.remove('select--show-top');\r\n          selectItemScroll.style.maxHeight = `${newMaxHeightValue}px`;\r\n        }\r\n      }\r\n    } else {\r\n      setTimeout(() => {\r\n        selectItem.classList.remove('select--show-top');\r\n        selectItemScroll.style.maxHeight = customMaxHeightValue;\r\n      }, +originalSelect.dataset.speed);\r\n    }\r\n  }\r\n  // Обработчик клика на пункт списка\r\n  optionAction(selectItem, originalSelect, optionItem) {\r\n    const selectOptions = selectItem.querySelector(`${this.getSelectClass(this.selectClasses.classSelectOptions)}`);\r\n    if (!selectOptions.classList.contains('_slide')) {\r\n      if (originalSelect.multiple) { // Если мультивыбор\r\n        // Выделяем классом элемент\r\n        optionItem.classList.toggle(this.selectClasses.classSelectOptionSelected);\r\n        // Очищаем выбранные элементы\r\n        const originalSelectSelectedItems = this.getSelectedOptionsData(originalSelect).elements;\r\n        originalSelectSelectedItems.forEach(originalSelectSelectedItem => {\r\n          originalSelectSelectedItem.removeAttribute('selected');\r\n        });\r\n        // Выбираем элементы\r\n        const selectSelectedItems = selectItem.querySelectorAll(this.getSelectClass(this.selectClasses.classSelectOptionSelected));\r\n        selectSelectedItems.forEach(selectSelectedItems => {\r\n          originalSelect.querySelector(`option[value = \"${selectSelectedItems.dataset.value}\"]`).setAttribute('selected', 'selected');\r\n        });\r\n      } else { // Если единичный выбор\r\n        // Если не указана настройка data-show-selected, скрываем выбранный элемент\r\n        if (!originalSelect.hasAttribute('data-show-selected')) {\r\n          setTimeout(() => {\r\n            // Сначала все показать\r\n            if (selectItem.querySelector(`${this.getSelectClass(this.selectClasses.classSelectOption)}[hidden]`)) {\r\n              selectItem.querySelector(`${this.getSelectClass(this.selectClasses.classSelectOption)}[hidden]`).hidden = false;\r\n            }\r\n            // Скрываем избранное\r\n            optionItem.hidden = true;\r\n          }, this.config.speed);\r\n        }\r\n        originalSelect.value = optionItem.hasAttribute('data-value') ? optionItem.dataset.value : optionItem.textContent;\r\n        this.selectAction(selectItem);\r\n      }\r\n      // Обновляем заголовок селекта\r\n      this.setSelectTitleValue(selectItem, originalSelect);\r\n      // Вызываем реакцию на смену селлекта\r\n      this.setSelectChange(originalSelect);\r\n    }\r\n  }\r\n  // Реакция на изменение оригинального select\r\n  selectChange(e) {\r\n    const originalSelect = e.target;\r\n    this.selectBuild(originalSelect);\r\n    this.setSelectChange(originalSelect);\r\n  }\r\n  // Обработчик смены в селекторе\r\n  setSelectChange(originalSelect) {\r\n    // Мгновенная валидация селлекта\r\n    if (originalSelect.hasAttribute('data-validate')) {\r\n      formValidate.validateInput(originalSelect);\r\n    }\r\n    // При смене селлекта присылаем форму\r\n    if (originalSelect.hasAttribute('data-submit') && originalSelect.value) {\r\n      let tempButton = document.createElement(\"button\");\r\n      tempButton.type = \"submit\";\r\n      originalSelect.closest('form').append(tempButton);\r\n      tempButton.click();\r\n      tempButton.remove();\r\n    }\r\n    const selectItem = originalSelect.parentElement;\r\n    // Вызов коллбек функции\r\n    this.selectCallback(selectItem, originalSelect);\r\n  }\r\n  // Обработчик disabled\r\n  selectDisabled(selectItem, originalSelect) {\r\n    if (originalSelect.disabled) {\r\n      selectItem.classList.add(this.selectClasses.classSelectDisabled);\r\n      this.getSelectElement(selectItem, this.selectClasses.classSelectTitle).selectElement.disabled = true;\r\n    } else {\r\n      selectItem.classList.remove(this.selectClasses.classSelectDisabled);\r\n      this.getSelectElement(selectItem, this.selectClasses.classSelectTitle).selectElement.disabled = false;\r\n    }\r\n  }\r\n  // Обработчик поиска по элементам списка\r\n  searchActions(selectItem) {\r\n    const originalSelect = this.getSelectElement(selectItem).originalSelect;\r\n    const selectInput = this.getSelectElement(selectItem, this.selectClasses.classSelectInput).selectElement;\r\n    const selectOptions = this.getSelectElement(selectItem, this.selectClasses.classSelectOptions).selectElement;\r\n    const selectOptionsItems = selectOptions.querySelectorAll(`.${this.selectClasses.classSelectOption} `);\r\n    const _this = this;\r\n    selectInput.addEventListener(\"input\", function () {\r\n      selectOptionsItems.forEach(selectOptionsItem => {\r\n        if (selectOptionsItem.textContent.toUpperCase().includes(selectInput.value.toUpperCase())) {\r\n          selectOptionsItem.hidden = false;\r\n        } else {\r\n          selectOptionsItem.hidden = true;\r\n        }\r\n      });\r\n      // Если список закрыт открываем\r\n      selectOptions.hidden === true ? _this.selectAction(selectItem) : null;\r\n    });\r\n  }\r\n  // Коллбек функция\r\n  selectCallback(selectItem, originalSelect) {\r\n    document.dispatchEvent(new CustomEvent(\"selectCallback\", {\r\n      detail: {\r\n        select: originalSelect\r\n      }\r\n    }));\r\n  }\r\n}\r\n// Запускаем и добавляем в объект модулей\r\nmodules_flsModules.select = new SelectConstructor({});\r\n\r\n\r\n\n;// CONCATENATED MODULE: ./src/js/files/script.js\nwindow.addEventListener(\"DOMContentLoaded\", function () {\r\n  // windowObserver();\r\n  document.addEventListener(\"click\", documentActions);\r\n});\r\n\r\n\r\nfunction documentActions(e) {\r\n  const targetElement = e.target;\r\n\r\n  if (targetElement.closest(\".profile-aside__account-current\")) {\r\n    targetElement.closest(\".profile-aside__accounts\").classList.toggle(\"_open-accounts\");\r\n  } else if (!targetElement.closest(\".profile-aside__wrapper\") && document.querySelector(\".profile-aside__accounts._open-accounts\")) {\r\n    document.querySelector(\".profile-aside__accounts\").classList.remove(\"_open-accounts\")\r\n  }\r\n};\r\n\r\n\r\nfunction filesCheckedUpdates() {\r\n\r\n  const fileCheckbox = document.querySelector(\".list-files__checkbox\");\r\n  const checkboxInput = fileCheckbox?.querySelector(\".checkbox__input\");\r\n\r\n  if (fileCheckbox && checkboxInput) {\r\n    const filesItems = document.querySelectorAll(\".item-files\");\r\n\r\n    const updateMasterCheckbox = () => {\r\n      const allChecked = Array.from(filesItems).every(item => {\r\n        const checkbox = item.querySelector(\".checkbox__input\");\r\n        return checkbox?.checked;\r\n      });\r\n      checkboxInput.checked = allChecked;\r\n    };\r\n\r\n    checkboxInput.addEventListener(\"change\", function (e) {\r\n      filesItems.forEach(item => {\r\n        const checkboxItemFiles = item.querySelector(\".checkbox__input\");\r\n        if (checkboxItemFiles) {\r\n          checkboxItemFiles.checked = e.target.checked;\r\n          if (e.target.checked) {\r\n            item.classList.add(\"item-files--active\");\r\n          } else {\r\n            item.classList.remove(\"item-files--active\");\r\n          }\r\n        }\r\n      });\r\n    });\r\n\r\n    filesItems.forEach(item => {\r\n      const checkboxItemFiles = item.querySelector(\".checkbox__input\");\r\n      if (checkboxItemFiles) {\r\n        checkboxItemFiles.addEventListener(\"change\", function () {\r\n          updateMasterCheckbox();\r\n\r\n          if (this.checked) {\r\n            item.classList.add(\"item-files--active\");\r\n          } else {\r\n            item.classList.remove(\"item-files--active\");\r\n          }\r\n        });\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfilesCheckedUpdates();\n;// CONCATENATED MODULE: ./src/js/app.js\n\r\n\r\n// myFunctions.addTouchClass();\r\n// Бургер меню\r\nmenuOpen();\r\n//========================================================================================================================================================\r\n\r\n// Переключение темы сайта\r\n// myFunctions.themeToggle();\r\n\r\n// показ шапки при скролле\r\n// myFunctions.headerScroll();\r\n\r\n//========================================================================================================================================================\r\n// Wathcer\r\n// myFunctions.elementWatches();\r\n//========================================================================================================================================================\r\n\r\n// Скролл к нужному блоку\r\n// myFunctions.gotoScroll();\r\n\r\n//========================================================================================================================================================\r\n\r\n// Табы\r\n// myFunctions.tabs();\r\n//========================================================================================================================================================\r\n\r\n// Spollers\r\n// myFunctions.spollers();\r\n\r\n//========================================================================================================================================================\r\n// Scroller\r\n// myFunctions.loopScroller();\r\n\r\n//========================================================================================================================================================\r\n\r\n// Звездный рейтинг\r\n// myFunctions.formRating();\r\n//========================================================================================================================================================\r\n// import \"./libs/popup.js\";\r\n\r\n//====Показать еще ====================================================================================================================================================\r\n// myFunctions.showMore();\r\n\r\n//========================================================================================================================================================\r\n\r\n\r\n\r\n// formsSettings.formsFieldsInit({\r\n//   viewpass: false,\r\n//   maskTel: false,\r\n//   valid: false,\r\n// });\r\n\r\n// Отправка формы\r\n// formsSettings.formSubmit();\r\n\r\n\r\n\r\n//Quantity\r\n// import \"./files/quantity.js\";\r\n//========================================================================================================================================================\r\n\r\n// Подключение Range Slider --------------------------------------------------------------\r\n// Документация https://refreshless.com/nouislider/\r\n// import \"./files/range.js\";\r\n//========================================================================================================================================================\r\n// Слайдер свайпер\r\n// import \"./files/swiper.js\";\r\n\r\n// Динамический адаптив\r\n// import \"./libs/dynamic_adapt.js\";\r\n\r\n\n/******/ })()\n;\n\n//# sourceURL=webpack://gulp/./dist/js/app.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./dist/js/app.js"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;